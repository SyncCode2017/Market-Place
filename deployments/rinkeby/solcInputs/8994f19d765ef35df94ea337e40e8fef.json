{
  "language": "Solidity",
  "sources": {
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror Marketplace__NotOwner();\n\n/** @title A contract for buying and selling items\n *  @author Abolaji\n *  @dev It uses an ERC20 token for transaction on the development network\n */\n\ncontract Marketplace is Ownable {\n    //Variables\n    address public feeAccount;\n    uint256 public feePercent;\n    address private immutable i_owner;\n    string public item;\n    address internal ethAddress;\n    IERC20 public ETHER;\n    string[] public allowedItems;\n    address payable internal user;\n\n    struct _order {\n        uint256 id;\n        address seller;\n        string item;\n        uint256 qtty_to_sell;\n        uint256 price;\n        uint256 timestamp;\n    }\n\n    mapping(address => mapping(string => uint256)) public goods;\n\n    // store the order\n    mapping(address => mapping(IERC20 => uint256)) public balance;\n    mapping(uint256 => _order) public orders;\n    uint256 public orderCount;\n    mapping(uint256 => ORDER_STATE) public orderStatus;\n    mapping(uint256 => bool) public orderCancelled;\n    mapping(uint256 => bool) public orderFilled;\n    mapping(uint256 => bool) public orderCreated;\n    mapping(uint256 => bool) public orderDelivered;\n    mapping(uint256 => address) public Buyers;\n    mapping(uint256 => uint256) public filledAmount;\n    mapping(uint256 => uint256) public filledQuantity;\n\n    //Events\n    event Deposit(IERC20 token, address user, uint256 amount, uint256 balance);\n    event Withdraw(IERC20 token, address user, uint256 amount, uint256 balance);\n    event OrderCreated(\n        uint256 id,\n        address seller,\n        string item,\n        uint256 qtty_to_sell,\n        uint256 price,\n        uint256 timestamp\n    );\n    event OrderFilled(\n        uint256 id,\n        address seller,\n        address buyer,\n        string item,\n        uint256 qtty_bought,\n        uint256 price,\n        uint256 timestamp\n    );\n    event OrderDelivered(\n        uint256 id,\n        address seller,\n        address buyer,\n        string item,\n        uint256 qtty_bought,\n        uint256 price,\n        uint256 timestamp\n    );\n    event CancelOpenOrder(\n        uint256 id,\n        address seller,\n        string item,\n        uint256 qtty_to_sell,\n        uint256 price,\n        uint256 timestamp\n    );\n    event CancelFilledOrder(\n        uint256 id,\n        address seller,\n        address buyer,\n        string item,\n        uint256 qtty_bought,\n        uint256 price,\n        uint256 timestamp\n    );\n\n    enum ORDER_STATE {\n        OPEN,\n        FILLED,\n        CLOSED\n    }\n\n    //ORDER_STATE public orderState;\n\n    constructor(\n        address _ethAddress,\n        address _feeAccount,\n        uint256 _feePercent\n    ) {\n        ETHER = IERC20(_ethAddress);\n        feeAccount = _feeAccount;\n        feePercent = _feePercent;\n        i_owner = msg.sender;\n    }\n\n    function depositEther(IERC20 _token, uint256 _amount) public payable {\n        require(_token == ETHER, \"Unknown token\");\n        ETHER.transferFrom(msg.sender, address(this), _amount);\n        balance[msg.sender][ETHER] = balance[msg.sender][ETHER] + msg.value;\n\n        emit Deposit(ETHER, msg.sender, msg.value, balance[msg.sender][ETHER]);\n    }\n\n    // allowing users to deposit ether\n\n    // //Fallback: reverts if Ether is sent to this smart contract by mistake\n    // function() external {\n    //     revert();\n    // }\n\n    function withdrawEther(IERC20 _token, uint256 _amount) public {\n        user = payable(msg.sender);\n        require(_token == ETHER, \"Unknown token\");\n        require(balance[msg.sender][ETHER] >= _amount);\n        balance[msg.sender][ETHER] = balance[msg.sender][ETHER] - _amount;\n        _token.transfer(user, _amount);\n        emit Withdraw(_token, msg.sender, _amount, balance[msg.sender][_token]);\n    }\n\n    function balanceOf(address _user, IERC20 _token)\n        public\n        view\n        returns (uint256)\n    {\n        return balance[_user][_token];\n    }\n\n    // add the order to storage\n    function makeOrder(\n        string memory _item,\n        uint256 _quantity,\n        uint256 _price\n    ) public {\n        require(itemIsAllowed(_item), \"Item is currently not allowed\");\n        orderCount = orderCount + 1;\n        orderStatus[orderCount] = ORDER_STATE.CLOSED;\n        orders[orderCount] = _order(\n            orderCount,\n            msg.sender,\n            _item,\n            _quantity,\n            _price,\n            block.timestamp\n        );\n        orderStatus[orderCount] = ORDER_STATE.OPEN;\n        goods[msg.sender][_item] = _quantity;\n        emit OrderCreated(\n            orderCount,\n            msg.sender,\n            _item,\n            _quantity,\n            _price,\n            block.timestamp\n        );\n    }\n\n    function fillOrder(uint256 _id, uint256 _quantity) public {\n        require(_id > 0 && _id <= orderCount);\n        require(orderStatus[_id] == ORDER_STATE.OPEN);\n\n        address _buyer = msg.sender;\n\n        // Fetch the order\n        _order storage order = orders[_id];\n        require(_quantity <= order.qtty_to_sell, \"Reduce the quantity\");\n        uint256 amount = _quantity * order.price;\n        require(balance[_buyer][ETHER] >= amount, \"You need more eth\");\n\n        _orderBond(_id, _buyer, _quantity, amount);\n\n        // Mark order as filled\n        orderFilled[_id] = true;\n        orderStatus[_id] = ORDER_STATE.FILLED;\n        Buyers[_id] = _buyer;\n        filledAmount[_id] = amount;\n        filledQuantity[_id] = _quantity;\n\n        emit OrderFilled(\n            _id,\n            order.seller,\n            _buyer,\n            order.item,\n            _quantity,\n            order.price,\n            block.timestamp\n        );\n    }\n\n    function OrderReceived(uint256 _id) public {\n        address _buyer = Buyers[_id];\n        _order storage order = orders[_id];\n        require(orderStatus[_id] == ORDER_STATE.FILLED);\n        require(msg.sender == _buyer, \"Not your order\");\n        uint256 amount = filledAmount[_id];\n        uint256 quantity = filledQuantity[_id];\n\n        _orderCompleted(_id, _buyer, quantity, amount);\n        orderStatus[_id] = ORDER_STATE.CLOSED;\n        emit OrderDelivered(\n            _id,\n            order.seller,\n            _buyer,\n            order.item,\n            quantity,\n            order.price,\n            block.timestamp\n        );\n    }\n\n    function cancelOpenOrder(uint256 _id) public {\n        _order storage order = orders[_id];\n        require(order.seller == msg.sender, \"Not your order\"); // must be \"my\" order\n        require(orderStatus[_id] == ORDER_STATE.OPEN);\n\n        orderCancelled[_id] = true;\n        orderStatus[_id] == ORDER_STATE.CLOSED;\n        emit CancelOpenOrder(\n            _id,\n            order.seller,\n            order.item,\n            order.qtty_to_sell,\n            order.price,\n            block.timestamp\n        );\n    }\n\n    function cancelFilledOrder(uint256 _id) public {\n        _order storage order = orders[_id];\n        address _buyer = Buyers[_id];\n        require(\n            order.seller == msg.sender || _buyer == msg.sender,\n            \"Not your order\"\n        ); // must be \"my\" order\n        require(orderStatus[_id] == ORDER_STATE.FILLED);\n\n        orderCancelled[_id] = true;\n        orderStatus[_id] == ORDER_STATE.CLOSED;\n        emit CancelFilledOrder(\n            _id,\n            order.seller,\n            _buyer,\n            order.item,\n            filledQuantity[_id],\n            order.price,\n            block.timestamp\n        );\n    }\n\n    function _orderBond(\n        uint256 _id,\n        address _buyer,\n        uint256 _quantity,\n        uint256 _amount\n    ) internal {\n        _order storage order = orders[_id];\n        // place order\n        balance[_buyer][ETHER] = balance[_buyer][ETHER] - _amount;\n        goods[msg.sender][order.item] =\n            goods[msg.sender][order.item] -\n            _quantity;\n    }\n\n    function _orderCompleted(\n        uint256 _id,\n        address _buyer,\n        uint256 _quantity,\n        uint256 _amount\n    ) internal {\n        _order storage order = orders[_id];\n        _amount = _amount - ((feePercent * _amount) / 100);\n\n        // place order\n        balance[order.seller][ETHER] = balance[order.seller][ETHER] + _amount;\n        goods[_buyer][order.item] = goods[_buyer][order.item] + _quantity;\n        balance[feeAccount][ETHER] =\n            balance[feeAccount][ETHER] +\n            ((feePercent * _amount) / 100);\n    }\n\n    function addAllowedItems(string memory _item) public onlyOwner {\n        allowedItems.push(_item);\n    }\n\n    function itemIsAllowed(string memory _item) public view returns (bool) {\n        for (\n            uint256 allowedItemIndex = 0;\n            allowedItemIndex < allowedItems.length;\n            allowedItemIndex++\n        ) {\n            if (\n                keccak256(bytes(allowedItems[allowedItemIndex])) ==\n                keccak256(bytes(_item))\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}